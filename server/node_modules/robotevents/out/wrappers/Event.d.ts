import { components, operations } from "../generated/robotevents.js";
import { EventData } from "../types.js";
import { Client } from "../utils/client.js";
import { Match } from "./Match.js";
import { Team } from "./Team.js";
export declare class Event implements EventData {
    client: Client;
    constructor(data: EventData, client: Client);
    id: number;
    sku: string;
    name: string;
    start?: string | undefined;
    end?: string | undefined;
    season: {
        id: number;
        name: string;
        code?: string | null;
    };
    program: {
        id: number;
        name: string;
        code?: string | null;
    };
    location: {
        venue?: string;
        address_1?: string;
        address_2?: string;
        city?: string;
        region?: string;
        postcode?: string;
        country?: string;
        coordinates?: components["schemas"]["Coordinates"];
    };
    locations?: {
        [key: string]: {
            venue?: string;
            address_1?: string;
            address_2?: string;
            city?: string;
            region?: string;
            postcode?: string;
            country?: string;
            coordinates?: components["schemas"]["Coordinates"];
        };
    }[] | undefined;
    divisions?: {
        id?: number;
        name?: string;
        order?: number;
    }[] | undefined;
    level?: "World" | "National" | "State" | "Signature" | "Other" | "Regional" | undefined;
    ongoing?: boolean | undefined;
    awards_finalized?: boolean | undefined;
    event_type?: "tournament" | "league" | "workshop" | "virtual" | undefined;
    getURL(): string;
    getData(): EventData;
    toJSON(): {
        id: number;
        sku: string;
        name: string;
        start?: string;
        end?: string;
        season: components["schemas"]["IdInfo"];
        program: components["schemas"]["IdInfo"];
        location: components["schemas"]["Location"];
        locations?: components["schemas"]["Locations"][];
        divisions?: components["schemas"]["Division"][];
        level?: components["schemas"]["EventLevel"];
        ongoing?: boolean;
        awards_finalized?: boolean;
        event_type?: components["schemas"]["EventType"];
    };
    /**
     * Get teams at an event
     * @param query Team Search Options
     * @returns List of Teams
     */
    teams(query?: operations["event_getTeams"]["parameters"]["query"], options?: Omit<RequestInit, "body" | "headers">): Promise<import("../utils/client.js").TransformedFetchResponse<{
        parameters: {
            query?: {
                "number[]"?: string[];
                registered?: boolean;
                "grade[]"?: ("College" | "High School" | "Middle School" | "Elementary School")[];
                "country[]"?: string[];
                myTeams?: boolean;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: undefined;
        responses: Omit<{
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedTeam"];
                };
            };
        }, 200> & {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: number;
                        number: string;
                        team_name?: string;
                        robot_name?: string;
                        organization?: string;
                        location?: components["schemas"]["Location"];
                        registered?: boolean;
                        program: components["schemas"]["IdInfo"];
                        grade?: components["schemas"]["Grade"];
                    }[];
                };
            };
        };
    }, {}, "application/json", Team[]>>;
    /**
     * Get skills runs at an event
     * @param query Query Params
     * @returns Array of skills runs
     */
    skills(query?: operations["event_getSkills"]["parameters"]["query"], options?: Omit<RequestInit, "body" | "headers">): Promise<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: {
                "team[]"?: number[];
                "type[]"?: ("driver" | "programming")[];
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: undefined;
        responses: Omit<{
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSkill"];
                };
            };
        }, 200> & {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id?: number;
                        event?: components["schemas"]["IdInfo"];
                        team?: components["schemas"]["IdInfo"];
                        type?: components["schemas"]["SkillType"];
                        season?: components["schemas"]["IdInfo"];
                        division?: components["schemas"]["IdInfo"];
                        rank?: number;
                        score?: number;
                        attempts?: number;
                    }[];
                };
            };
        };
    }, {}, "application/json">>;
    /**
     * Gets awards at an event
     * @param query Query Params
     * @returns Array of awards
     */
    awards(query?: operations["event_getAwards"]["parameters"]["query"], options?: Omit<RequestInit, "body" | "headers">): Promise<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: {
                "team[]"?: number[];
                "winner[]"?: string[];
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: undefined;
        responses: Omit<{
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedAward"];
                };
            };
        }, 200> & {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id?: number;
                        event?: components["schemas"]["IdInfo"];
                        order?: number;
                        title?: string;
                        qualifications?: string[];
                        designation?: "tournament" | "division" | null;
                        classification?: "champion" | "finalist" | "semifinalist" | "quarterfinalist" | null;
                        teamWinners?: components["schemas"]["TeamAwardWinner"][];
                        individualWinners?: string[];
                    }[];
                };
            };
        };
    }, {}, "application/json">>;
    /**
     * Gets matches for a division
     * @param division
     * @param query Query Params
     * @returns Array of matches
     */
    matches(division: number, query?: operations["event_getDivisionMatches"]["parameters"]["query"], options?: Omit<RequestInit, "body" | "headers">): Promise<import("../utils/client.js").TransformedFetchResponse<{
        parameters: {
            query?: {
                "team[]"?: number[];
                "round[]"?: number[];
                "instance[]"?: number[];
                "matchnum[]"?: number[];
            };
            header?: never;
            path: {
                id: number;
                div: number;
            };
            cookie?: never;
        };
        requestBody?: undefined;
        responses: Omit<{
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedMatch"];
                };
            };
        }, 200> & {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: number;
                        event: components["schemas"]["IdInfo"];
                        division: components["schemas"]["IdInfo"];
                        round: number;
                        instance: number;
                        matchnum: number;
                        scheduled?: string;
                        started?: string;
                        field?: string;
                        scored: boolean;
                        name: string;
                        alliances: components["schemas"]["Alliance"][];
                    }[];
                };
            };
        };
    }, {}, "application/json", Match[]>>;
    /**
     * Gets finalist rankings for a division (used in VIQRC)
     * @param division Division ID
     * @param query Query Params
     * @returns Array of finalist rankings
     */
    finalistRankings(division: number, query?: operations["event_getDivisionFinalistRankings"]["parameters"]["query"], options?: Omit<RequestInit, "body" | "headers">): Promise<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: {
                "team[]"?: number[];
                "rank[]"?: number[];
            };
            header?: never;
            path: {
                id: number;
                div: number;
            };
            cookie?: never;
        };
        requestBody?: undefined;
        responses: Omit<{
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedRanking"];
                };
            };
        }, 200> & {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id?: number;
                        event?: components["schemas"]["IdInfo"];
                        division?: components["schemas"]["IdInfo"];
                        rank?: number;
                        team?: components["schemas"]["IdInfo"];
                        wins?: number;
                        losses?: number;
                        ties?: number;
                        wp?: number;
                        ap?: number;
                        sp?: number;
                        high_score?: number;
                        average_points?: number;
                        total_points?: number;
                    }[];
                };
            };
        };
    }, {}, "application/json">>;
    /**
     * Gets rankings for a division
     * @param division Division ID
     * @param query Query Params
     * @returns List of rankings
     */
    rankings(division: number, query?: operations["event_getDivisionRankings"]["parameters"]["query"], options?: Omit<RequestInit, "body" | "headers">): Promise<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: {
                "team[]"?: number[];
                "rank[]"?: number[];
            };
            header?: never;
            path: {
                id: number;
                div: number;
            };
            cookie?: never;
        };
        requestBody?: undefined;
        responses: Omit<{
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedRanking"];
                };
            };
        }, 200> & {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id?: number;
                        event?: components["schemas"]["IdInfo"];
                        division?: components["schemas"]["IdInfo"];
                        rank?: number;
                        team?: components["schemas"]["IdInfo"];
                        wins?: number;
                        losses?: number;
                        ties?: number;
                        wp?: number;
                        ap?: number;
                        sp?: number;
                        high_score?: number;
                        average_points?: number;
                        total_points?: number;
                    }[];
                };
            };
        };
    }, {}, "application/json">>;
}
