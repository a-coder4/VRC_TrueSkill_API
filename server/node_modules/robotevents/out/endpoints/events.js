import { transformResponse } from "../utils/client.js";
import { Event } from "../wrappers/Event.js";
export function eventsEndpoint(client) {
    return {
        /**
         * Get a list of events
         * @param query Event Search Options
         * @param options Request Options, passed to fetch
         * @returns Paginated List of Events
         */
        async search(query, options) {
            return transformResponse(client.PaginatedGET("/events", { params: { query }, ...options }), (data) => data.map((event) => new Event(event, client)));
        },
        /**
         * Get an event by ID
         * @param id Event ID (not SKU)
         * @returns Event
         */
        async get(id, options) {
            return transformResponse(client.GET("/events/{id}", {
                params: { path: { id } },
                ...options,
            }), (data) => new Event(data, client));
        },
        /**
         * Get an event by SKU
         * @param id Event SKU
         * @returns Event
         */
        async getBySKU(sku, options) {
            return transformResponse(client.GET("/events", {
                params: { query: { "sku[]": [sku] } },
                ...options,
            }), (data) => {
                const event = data.data?.[0];
                return event ? new Event(event, client) : null;
            });
        },
    };
}
//# sourceMappingURL=events.js.map