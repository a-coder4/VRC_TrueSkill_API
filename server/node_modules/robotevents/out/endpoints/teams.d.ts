import { operations } from "../generated/shim.js";
import { ProgramCode } from "../types.js";
import { Client } from "../utils/client.js";
import { Team } from "../wrappers/Team.js";
export declare function teamsEndpoints(client: Client): {
    /**
     * Get team by their ID (not number)
     * @param id Team ID
     * @returns Team
     **/
    get(id: number, options?: Omit<RequestInit, "body" | "headers">): Promise<import("../utils/client.js").TransformedFetchResponse<{
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../generated/robotevents.js").components["schemas"]["Team"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../generated/robotevents.js").components["schemas"]["Error"];
                };
            };
        };
    }, {
        signal?: AbortSignal | null;
        window?: null;
        priority?: RequestPriority;
        referrer?: string;
        method?: string;
        cache?: RequestCache;
        credentials?: RequestCredentials;
        integrity?: string;
        keepalive?: boolean;
        mode?: RequestMode;
        redirect?: RequestRedirect;
        referrerPolicy?: ReferrerPolicy;
        params: {
            path: {
                id: number;
            };
        };
    }, "application/json", Team>>;
    /**
     * Get a list of teams
     * @param options Query Params
     * @returns List of teams
     **/
    search(query?: operations["team_getTeams"]["parameters"]["query"], options?: Omit<RequestInit, "body" | "headers">): Promise<import("../utils/client.js").TransformedFetchResponse<{
        parameters: {
            query?: {
                "id[]"?: number[];
                "number[]"?: string[];
                "event[]"?: number[];
                registered?: boolean;
                "program[]"?: number[];
                "grade[]"?: ("College" | "High School" | "Middle School" | "Elementary School")[];
                "country[]"?: string[];
                myTeams?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: undefined;
        responses: Omit<{
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../generated/robotevents.js").components["schemas"]["PaginatedTeam"];
                };
            };
        }, 200> & {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: number;
                        number: string;
                        team_name?: string;
                        robot_name?: string;
                        organization?: string;
                        location?: import("../generated/robotevents.js").components["schemas"]["Location"];
                        registered?: boolean;
                        program: import("../generated/robotevents.js").components["schemas"]["IdInfo"];
                        grade?: import("../generated/robotevents.js").components["schemas"]["Grade"];
                    }[];
                };
            };
        };
    }, {}, "application/json", Team[]>>;
    /**
     * Get Team by Number
     * @param number Team Number
     * @param program Program Code
     * @param options Request Options
     * @returns Team
     */
    getByNumber(number: string, program: ProgramCode, options?: Omit<RequestInit, "body" | "headers">): Promise<import("../utils/client.js").TransformedFetchResponse<{
        parameters: {
            query?: {
                "id[]"?: number[];
                "number[]"?: string[];
                "event[]"?: number[];
                registered?: boolean;
                "program[]"?: number[];
                "grade[]"?: ("College" | "High School" | "Middle School" | "Elementary School")[];
                "country[]"?: string[];
                myTeams?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: undefined;
        responses: Omit<{
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../generated/robotevents.js").components["schemas"]["PaginatedTeam"];
                };
            };
        }, 200> & {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: number;
                        number: string;
                        team_name?: string;
                        robot_name?: string;
                        organization?: string;
                        location?: import("../generated/robotevents.js").components["schemas"]["Location"];
                        registered?: boolean;
                        program: import("../generated/robotevents.js").components["schemas"]["IdInfo"];
                        grade?: import("../generated/robotevents.js").components["schemas"]["Grade"];
                    }[];
                };
            };
        };
    }, {}, "application/json", Team | null>>;
};
