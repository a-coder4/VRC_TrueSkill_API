import type { Event } from './index.js';
import { Client } from '../client.js';
import type { ObjectBuilder } from '../../builders.js';
export declare class EventsClient extends Client {
    findAll(request: (builder: EventsRequestBuilder) => ObjectBuilder<EventsRequest>): Promise<Event[]>;
}
export declare class EventsRequestBuilder implements ObjectBuilder<EventsRequest> {
    #private;
    programIds(...value: number[]): this;
    seasonId(value: number): this;
    location(countryId: number, region?: string): this;
    build(): EventsRequest;
    static EventsRequest: {
        new (builder: EventsRequestBuilder): {
            readonly programIds: number[];
            readonly seasonId?: number | undefined;
            readonly countryId?: number | undefined;
            readonly region?: string | undefined;
            data(): EventsData;
        };
    };
}
export declare class EventsRequest extends EventsRequestBuilder.EventsRequest {
}
interface EventsData {
    programs: number[];
    season_id?: number;
    country?: number;
    region?: string;
    when?: When;
}
declare enum When {
    FUTURE = "future",
    PAST = "past"
}
export {};
//# sourceMappingURL=events.d.ts.map