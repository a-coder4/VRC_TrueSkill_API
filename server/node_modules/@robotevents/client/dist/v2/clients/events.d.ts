import type { ObjectBuilder } from '../../builders.js';
import { Client } from '../client.js';
import { PageableRequestBuilder, type PageableParams } from '../pageable.js';
import type { Event, EventLevel, EventType } from './index.js';
export declare class EventsClient extends Client {
    findAll(request?: (builder: EventsRequestBuilder) => ObjectBuilder<EventsRequest>): import("../client.js").RobotEventsCursor<Event>;
    findAllBySeason(request: (builder: SeasonEventsRequestBuilder) => ObjectBuilder<SeasonEventsRequest>): import("../client.js").RobotEventsCursor<Event>;
    findAllByTeam(request: (builder: TeamEventsRequestBuilder) => ObjectBuilder<TeamEventsRequest>): import("../client.js").RobotEventsCursor<Event>;
    findById(id: number): Promise<Event>;
}
export declare class EventsRequestBuilder extends PageableRequestBuilder<EventsRequest, EventsRequestBuilder> {
    #private;
    ids(...value: number[]): this;
    skus(...value: string[]): this;
    teamIds(...value: number[]): this;
    seasonIds(...value: number[]): this;
    start(value: Date): this;
    end(value: Date): this;
    levels(...value: EventLevel[]): this;
    mine(value: boolean): this;
    types(...value: EventType[]): this;
    build(): EventsRequest;
    static EventsRequest: {
        new (builder: EventsRequestBuilder): {
            readonly ids?: number[] | undefined;
            readonly skus?: string[] | undefined;
            readonly teamIds?: number[] | undefined;
            readonly seasonIds?: number[] | undefined;
            readonly start?: Date | undefined;
            readonly end?: Date | undefined;
            readonly levels?: EventLevel[] | undefined;
            readonly mine?: boolean | undefined;
            readonly types?: EventType[] | undefined;
            params(): EventsParams;
            readonly page?: number | undefined;
            readonly perPage?: number | undefined;
        };
    };
}
export declare class EventsRequest extends EventsRequestBuilder.EventsRequest {
}
interface EventsParams extends PageableParams {
    id?: number[];
    sku?: string[];
    team?: number[];
    season?: number[];
    start?: Date;
    end?: Date;
    level?: EventLevel[];
    myEvents?: boolean;
    eventType?: EventType[];
}
export declare class SeasonEventsRequestBuilder extends PageableRequestBuilder<SeasonEventsRequest, SeasonEventsRequestBuilder> {
    #private;
    seasonId(value: number): this;
    skus(...value: string[]): this;
    teamIds(...value: number[]): this;
    start(value: Date): this;
    end(value: Date): this;
    levels(...value: EventLevel[]): this;
    build(): SeasonEventsRequest;
    static SeasonEventsRequest: {
        new (builder: SeasonEventsRequestBuilder): {
            readonly seasonId: number;
            readonly skus?: string[] | undefined;
            readonly teamIds?: number[] | undefined;
            readonly start?: Date | undefined;
            readonly end?: Date | undefined;
            readonly levels?: EventLevel[] | undefined;
            params(): SeasonEventsParams;
            readonly page?: number | undefined;
            readonly perPage?: number | undefined;
        };
    };
}
export declare class SeasonEventsRequest extends SeasonEventsRequestBuilder.SeasonEventsRequest {
}
interface SeasonEventsParams extends PageableParams {
    sku?: string[];
    team?: number[];
    start?: Date;
    end?: Date;
    level?: EventLevel[];
}
export declare class TeamEventsRequestBuilder extends PageableRequestBuilder<TeamEventsRequest, TeamEventsRequestBuilder> {
    #private;
    teamId(value: number): this;
    skus(...value: string[]): this;
    seasonIds(...value: number[]): this;
    start(value: Date): this;
    end(value: Date): this;
    levels(...value: EventLevel[]): this;
    build(): TeamEventsRequest;
    static TeamEventsRequest: {
        new (builder: TeamEventsRequestBuilder): {
            readonly teamId: number;
            readonly skus?: string[] | undefined;
            readonly seasonIds?: number[] | undefined;
            readonly start?: Date | undefined;
            readonly end?: Date | undefined;
            readonly levels?: EventLevel[] | undefined;
            params(): TeamEventsParams;
            readonly page?: number | undefined;
            readonly perPage?: number | undefined;
        };
    };
}
export declare class TeamEventsRequest extends TeamEventsRequestBuilder.TeamEventsRequest {
}
interface TeamEventsParams extends PageableParams {
    sku?: string[];
    season?: number[];
    start?: Date;
    end?: Date;
    level?: EventLevel[];
}
export {};
//# sourceMappingURL=events.d.ts.map