import type { ObjectBuilder } from '../../builders.js';
import { Client } from '../client.js';
import { PageableRequestBuilder, type PageableParams } from '../pageable.js';
import type { Ranking } from './index.js';
export declare class RankingsClient extends Client {
    findAllByEventDivision(request: (builder: EventDivisionRankingsRequestBuilder) => ObjectBuilder<EventDivisionRankingsRequest>): import("../client.js").RobotEventsCursor<Ranking>;
    findAllByTeam(request: (builder: TeamRankingsRequestBuilder) => ObjectBuilder<TeamRankingsRequest>): import("../client.js").RobotEventsCursor<Ranking>;
    findAllFinalistsByEventDivision(request: (builder: EventDivisionRankingsRequestBuilder) => ObjectBuilder<EventDivisionRankingsRequest>): import("../client.js").RobotEventsCursor<Ranking>;
}
export declare class EventDivisionRankingsRequestBuilder extends PageableRequestBuilder<EventDivisionRankingsRequest, EventDivisionRankingsRequestBuilder> {
    #private;
    eventId(value: number): this;
    divisionId(value: number): this;
    teamIds(...value: number[]): this;
    ranks(...value: number[]): this;
    build(): EventDivisionRankingsRequest;
    static EventDivisionRankingsRequest: {
        new (builder: EventDivisionRankingsRequestBuilder): {
            readonly eventId: number;
            readonly divisionId: number;
            readonly teamIds?: number[] | undefined;
            readonly ranks?: number[] | undefined;
            params(): EventDivisionRankingsParams;
            readonly page?: number | undefined;
            readonly perPage?: number | undefined;
        };
    };
}
export declare class EventDivisionRankingsRequest extends EventDivisionRankingsRequestBuilder.EventDivisionRankingsRequest {
}
interface EventDivisionRankingsParams extends PageableParams {
    team?: number[];
    rank?: number[];
}
export declare class TeamRankingsRequestBuilder extends PageableRequestBuilder<TeamRankingsRequest, TeamRankingsRequestBuilder> {
    #private;
    teamId(value: number): this;
    eventIds(...value: number[]): this;
    ranks(...value: number[]): this;
    seasonIds(...value: number[]): this;
    build(): TeamRankingsRequest;
    static TeamRankingsRequest: {
        new (builder: TeamRankingsRequestBuilder): {
            readonly teamId: number;
            readonly eventIds?: number[] | undefined;
            readonly ranks?: number[] | undefined;
            readonly seasonIds?: number[] | undefined;
            params(): TeamRankingsParams;
            readonly page?: number | undefined;
            readonly perPage?: number | undefined;
        };
    };
}
export declare class TeamRankingsRequest extends TeamRankingsRequestBuilder.TeamRankingsRequest {
}
interface TeamRankingsParams extends PageableParams {
    event?: number[];
    rank?: number[];
    season?: number[];
}
export {};
//# sourceMappingURL=rankings.d.ts.map