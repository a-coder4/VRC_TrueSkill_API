import type { ObjectBuilder } from '../../builders.js';
import { Client } from '../client.js';
import { PageableRequestBuilder, type PageableParams } from '../pageable.js';
import type { Season } from './index.js';
export declare class SeasonsClient extends Client {
    findAll(request?: (builder: SeasonsRequestBuilder) => ObjectBuilder<SeasonsRequest>): import("../client.js").RobotEventsCursor<Season>;
    findById(id: number): Promise<Season>;
}
export declare class SeasonsRequestBuilder extends PageableRequestBuilder<SeasonsRequest, SeasonsRequestBuilder> {
    #private;
    ids(...value: number[]): this;
    programIds(...value: number[]): this;
    teamIds(...value: number[]): this;
    start(value: Date): this;
    end(value: Date): this;
    active(value: boolean): this;
    build(): SeasonsRequest;
    static SeasonsRequest: {
        new (builder: SeasonsRequestBuilder): {
            readonly ids?: number[] | undefined;
            readonly programIds?: number[] | undefined;
            readonly teamIds?: number[] | undefined;
            readonly start?: Date | undefined;
            readonly end?: Date | undefined;
            readonly active?: boolean | undefined;
            params(): SeasonsParams;
            readonly page?: number | undefined;
            readonly perPage?: number | undefined;
        };
    };
}
export declare class SeasonsRequest extends SeasonsRequestBuilder.SeasonsRequest {
}
interface SeasonsParams extends PageableParams {
    id?: number[];
    program?: number[];
    team?: number[];
    start?: Date;
    end?: Date;
    active?: boolean;
}
export {};
//# sourceMappingURL=seasons.d.ts.map