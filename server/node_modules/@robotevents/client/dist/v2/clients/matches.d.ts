import type { ObjectBuilder } from '../../builders.js';
import { Client } from '../client.js';
import { PageableRequestBuilder, type PageableParams } from '../pageable.js';
import type { Match } from './index.js';
export declare class MatchesClient extends Client {
    findAllByEventDivision(request: (builder: EventDivisionMatchesRequestBuilder) => ObjectBuilder<EventDivisionMatchesRequest>): import("../client.js").RobotEventsCursor<Match>;
    findAllByTeam(request: (builder: TeamMatchesRequestBuilder) => ObjectBuilder<TeamMatchesRequest>): import("../client.js").RobotEventsCursor<Match>;
}
export declare class EventDivisionMatchesRequestBuilder extends PageableRequestBuilder<EventDivisionMatchesRequest, EventDivisionMatchesRequestBuilder> {
    #private;
    eventId(value: number): this;
    divisionId(value: number): this;
    teamIds(...value: number[]): this;
    rounds(...value: number[]): this;
    instances(...value: number[]): this;
    numbers(...value: number[]): this;
    build(): EventDivisionMatchesRequest;
    static EventDivisionMatchesRequest: {
        new (builder: EventDivisionMatchesRequestBuilder): {
            readonly eventId: number;
            readonly divisionId: number;
            readonly teamIds?: number[] | undefined;
            readonly rounds?: number[] | undefined;
            readonly instances?: number[] | undefined;
            readonly numbers?: number[] | undefined;
            params(): EventDivisionMatchesParams;
            readonly page?: number | undefined;
            readonly perPage?: number | undefined;
        };
    };
}
export declare class EventDivisionMatchesRequest extends EventDivisionMatchesRequestBuilder.EventDivisionMatchesRequest {
}
interface EventDivisionMatchesParams extends PageableParams {
    team?: number[];
    round?: number[];
    instance?: number[];
    matchnum?: number[];
}
export declare class TeamMatchesRequestBuilder extends PageableRequestBuilder<TeamMatchesRequest, TeamMatchesRequestBuilder> {
    #private;
    teamId(value: number): this;
    eventIds(...value: number[]): this;
    seasonIds(...value: number[]): this;
    rounds(...value: number[]): this;
    instances(...value: number[]): this;
    numbers(...value: number[]): this;
    build(): TeamMatchesRequest;
    static TeamMatchesRequest: {
        new (builder: TeamMatchesRequestBuilder): {
            readonly teamId: number;
            readonly eventIds?: number[] | undefined;
            readonly seasonIds?: number[] | undefined;
            readonly rounds?: number[] | undefined;
            readonly instances?: number[] | undefined;
            readonly numbers?: number[] | undefined;
            params(): TeamMatchesParams;
            readonly page?: number | undefined;
            readonly perPage?: number | undefined;
        };
    };
}
export declare class TeamMatchesRequest extends TeamMatchesRequestBuilder.TeamMatchesRequest {
}
interface TeamMatchesParams extends PageableParams {
    event?: number[];
    season?: number[];
    round?: number[];
    instance?: number[];
    matchnum?: number[];
}
export {};
//# sourceMappingURL=matches.d.ts.map