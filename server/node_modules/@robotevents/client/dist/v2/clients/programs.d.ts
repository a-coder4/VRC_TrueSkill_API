import type { ObjectBuilder } from '../../builders.js';
import { Client } from '../client.js';
import { PageableRequestBuilder, type PageableParams } from '../pageable.js';
import type { Program } from './index.js';
export declare class ProgramsClient extends Client {
    findAll(request?: (builder: ProgramsRequestBuilder) => ObjectBuilder<ProgramsRequest>): import("../client.js").RobotEventsCursor<Program>;
    findById(id: number): Promise<Program>;
}
export declare class ProgramsRequestBuilder extends PageableRequestBuilder<ProgramsRequest, ProgramsRequestBuilder> {
    #private;
    ids(...value: number[]): this;
    build(): ProgramsRequest;
    static ProgramsRequest: {
        new (builder: ProgramsRequestBuilder): {
            readonly ids?: number[] | undefined;
            params(): ProgramsParams;
            readonly page?: number | undefined;
            readonly perPage?: number | undefined;
        };
    };
}
export declare class ProgramsRequest extends ProgramsRequestBuilder.ProgramsRequest {
}
interface ProgramsParams extends PageableParams {
    id?: number[];
}
export {};
//# sourceMappingURL=programs.d.ts.map