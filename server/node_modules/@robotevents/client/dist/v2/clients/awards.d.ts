import type { ObjectBuilder } from '../../builders.js';
import { Client } from '../client.js';
import { PageableRequestBuilder, type PageableParams } from '../pageable.js';
import type { Award } from './index.js';
export declare class AwardsClient extends Client {
    findAllByEvent(request: (builder: EventAwardsRequestBuilder) => ObjectBuilder<EventAwardsRequest>): import("../client.js").RobotEventsCursor<Award>;
    findAllByTeam(request: (builder: TeamAwardsRequestBuilder) => ObjectBuilder<TeamAwardsRequest>): import("../client.js").RobotEventsCursor<Award>;
}
export declare class EventAwardsRequestBuilder extends PageableRequestBuilder<EventAwardsRequest, EventAwardsRequestBuilder> {
    #private;
    eventId(value: number): this;
    teamIds(...value: number[]): this;
    individuals(...value: string[]): this;
    build(): EventAwardsRequest;
    static EventAwardsRequest: {
        new (builder: EventAwardsRequestBuilder): {
            readonly eventId: number;
            readonly teamIds?: number[] | undefined;
            readonly individuals?: string[] | undefined;
            params(): EventAwardsParams;
            readonly page?: number | undefined;
            readonly perPage?: number | undefined;
        };
    };
}
export declare class EventAwardsRequest extends EventAwardsRequestBuilder.EventAwardsRequest {
}
interface EventAwardsParams extends PageableParams {
    team?: number[];
    winner?: string[];
}
export declare class TeamAwardsRequestBuilder extends PageableRequestBuilder<TeamAwardsRequest, TeamAwardsRequestBuilder> {
    #private;
    teamId(value: number): this;
    eventIds(...value: number[]): this;
    seasonIds(...value: number[]): this;
    build(): TeamAwardsRequest;
    static TeamAwardsRequest: {
        new (builder: TeamAwardsRequestBuilder): {
            readonly teamId: number;
            readonly eventIds?: number[] | undefined;
            readonly seasonIds?: number[] | undefined;
            params(): TeamAwardsParams;
            readonly page?: number | undefined;
            readonly perPage?: number | undefined;
        };
    };
}
export declare class TeamAwardsRequest extends TeamAwardsRequestBuilder.TeamAwardsRequest {
}
interface TeamAwardsParams extends PageableParams {
    event?: number[];
    season?: number[];
}
export {};
//# sourceMappingURL=awards.d.ts.map