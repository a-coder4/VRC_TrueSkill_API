import { Cursor } from '../cursor.js';
export class Client {
    constructor(axiosInstance) {
        Object.defineProperty(this, "axiosInstance", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: axiosInstance
        });
    }
    async get(path, params) {
        const response = await this.axiosInstance.get(path, { params });
        return response.data;
    }
    getAll(path, params) {
        return new RobotEventsCursor(page => this.get(path, page ? { ...params, page } : params));
    }
}
export class RobotEventsCursor extends Cursor {
    constructor(findPage) {
        super();
        Object.defineProperty(this, "findPage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: findPage
        });
        Object.defineProperty(this, "values", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "currentPage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "isLastPage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
    }
    async hasNext() {
        if (this.currentPage === 0) {
            this.values.push(...(await this.nextPage()));
        }
        return this.values.length > 0 || !this.isLastPage;
    }
    async next() {
        if (!this.values.length && !this.isLastPage) {
            this.values.push(...(await this.nextPage()));
        }
        const next = this.values.shift();
        if (!next) {
            throw new Error('No elements remaining in cursor');
        }
        return next;
    }
    async nextPage() {
        if (this.values.length) {
            return this.values.splice(0);
        }
        if (this.isLastPage) {
            throw new Error('No elements remaining in cursor');
        }
        const { data, meta: { current_page, last_page }, } = await this.findPage(++this.currentPage);
        this.isLastPage = current_page === last_page;
        return data;
    }
}
//# sourceMappingURL=client.js.map