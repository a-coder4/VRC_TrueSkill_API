import createOpenAPIClient from "openapi-fetch";
export function createClient(options) {
    const base = createOpenAPIClient({
        baseUrl: "https://www.robotevents.com/api/v2",
        headers: {
            Authorization: `Bearer ${options.authorization.token}`,
            ...options.request?.headers,
        },
        ...options.request,
    });
    // base.use({
    //   onRequest(options) {
    //     console.log("REQUEST", options);
    //   },
    //   onResponse(response) {
    //     console.log("RESPONSE", response);
    //   },
    // });
    const PaginatedGET = async (path, init) => {
        let page = 1;
        let per_page = 250;
        let total = 0;
        let totalPages = 0;
        const data = [];
        const queryBase = init.params?.query ?? {};
        do {
            const request = await base.GET(path, {
                ...init,
                params: {
                    ...init.params,
                    query: { ...queryBase, page, per_page },
                },
            });
            if (request.error) {
                return { response: request.response, error: request.error };
            }
            const requestData = request.data;
            if (requestData.data) {
                data.push(...requestData.data);
            }
            if (requestData.meta) {
                total = requestData.meta.total ?? 0;
                totalPages = requestData.meta.last_page ?? 0;
            }
            const nextPageUrl = requestData.meta?.next_page_url;
            if (!nextPageUrl) {
                break;
            }
            const nextPage = new URL(nextPageUrl).searchParams.get("page");
            if (!nextPage) {
                break;
            }
            page = Number.parseInt(nextPage);
            if (!page || Number.isNaN(page)) {
                break;
            }
        } while (data.length < total && page <= totalPages);
        return {
            response: new Response(),
            data: data,
        };
    };
    return { ...base, PaginatedGET };
}
export async function transformResponse(response, transform) {
    const resp = await response;
    if (resp.error) {
        return { response: resp.response, error: resp.error };
    }
    if (!resp.data) {
        return { response: resp.response, data: undefined, error: undefined };
    }
    const data = await transform(resp.data, resp);
    return { response: resp.response, data, error: undefined };
}
//# sourceMappingURL=client.js.map