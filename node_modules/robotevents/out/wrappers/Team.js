import { transformResponse } from "../utils/client.js";
import { Event } from "./Event.js";
import { Match } from "./Match.js";
export class Team {
    client;
    constructor(data, client) {
        this.client = client;
        this.id = data.id;
        this.number = data.number;
        this.team_name = data.team_name;
        this.robot_name = data.robot_name;
        this.organization = data.organization;
        this.location = data.location;
        this.registered = data.registered;
        this.program = data.program;
        this.grade = data.grade;
    }
    // Team Data
    id;
    number;
    team_name;
    robot_name;
    organization;
    location;
    registered;
    program;
    grade;
    /**
     * Gets the RobotEvents listing for the team
     */
    getURL() {
        return `https://www.robotevents.com/teams/${this.program.code}/${this.number}`;
    }
    /**
     * Returns the raw response from RobotEvents
     */
    getData() {
        return {
            id: this.id,
            number: this.number,
            team_name: this.team_name,
            robot_name: this.robot_name,
            organization: this.organization,
            location: this.location,
            registered: this.registered,
            program: this.program,
            grade: this.grade,
        };
    }
    /**
     * Converts the team to JSON
     */
    toJSON() {
        return this.getData();
    }
    /**
     * Get events the team has attended (or registered for)
     * @param query Query Params
     * @returns List of events
     */
    events(query, options) {
        return transformResponse(this.client.PaginatedGET("/teams/{id}/events", {
            params: { path: { id: this.id }, query },
            ...options,
        }), (data) => data.map((event) => new Event(event, this.client)));
    }
    /**
     * Get matches the team has played
     * @param query Query Params
     * @returns List of matches
     */
    matches(query, options) {
        return transformResponse(this.client.PaginatedGET("/teams/{id}/matches", {
            params: { path: { id: this.id }, query },
            ...options,
        }), (data) => data.map((match) => new Match(match)));
    }
    /**
     * Get rankings for the team
     * @param query Query Params
     * @returns List of rankings
     */
    rankings(query, options) {
        return this.client.PaginatedGET("/teams/{id}/rankings", {
            params: { path: { id: this.id }, query },
            ...options,
        });
    }
    /**
     * Get skills runs for the team
     * @param query Query Params
     * @returns List of skills runs
     */
    skills(query, options) {
        return this.client.PaginatedGET("/teams/{id}/skills", {
            params: { path: { id: this.id }, query, ...options },
        });
    }
    /**
     * Get awards the team has won
     * @param query Query Params
     * @returns List of awards
     */
    awards(query, options) {
        return this.client.PaginatedGET("/teams/{id}/awards", {
            params: { path: { id: this.id }, query },
            ...options,
        });
    }
}
//# sourceMappingURL=Team.js.map