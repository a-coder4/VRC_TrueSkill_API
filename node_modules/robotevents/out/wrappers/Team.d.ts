import { components, operations } from "../generated/robotevents.js";
import { TeamData } from "../types.js";
import { Client } from "../utils/client.js";
import { Event } from "./Event.js";
import { Match } from "./Match.js";
export declare class Team implements TeamData {
    client: Client;
    constructor(data: TeamData, client: Client);
    id: number;
    number: string;
    team_name?: string | undefined;
    robot_name?: string | undefined;
    organization?: string | undefined;
    location?: {
        venue?: string;
        address_1?: string;
        address_2?: string;
        city?: string;
        region?: string;
        postcode?: string;
        country?: string;
        coordinates?: components["schemas"]["Coordinates"];
    } | undefined;
    registered?: boolean | undefined;
    program: {
        id: number;
        name: string;
        code?: string | null;
    };
    grade?: "College" | "High School" | "Middle School" | "Elementary School" | undefined;
    /**
     * Gets the RobotEvents listing for the team
     */
    getURL(): string;
    /**
     * Returns the raw response from RobotEvents
     */
    getData(): TeamData;
    /**
     * Converts the team to JSON
     */
    toJSON(): {
        id: number;
        number: string;
        team_name?: string;
        robot_name?: string;
        organization?: string;
        location?: components["schemas"]["Location"];
        registered?: boolean;
        program: components["schemas"]["IdInfo"];
        grade?: components["schemas"]["Grade"];
    };
    /**
     * Get events the team has attended (or registered for)
     * @param query Query Params
     * @returns List of events
     */
    events(query?: operations["team_getEvents"]["parameters"]["query"], options?: Omit<RequestInit, "body" | "headers">): Promise<import("../utils/client.js").TransformedFetchResponse<{
        parameters: {
            query?: {
                "sku[]"?: string[];
                "season[]"?: number[];
                start?: string;
                end?: string;
                "level[]"?: ("World" | "National" | "State" | "Signature" | "Other")[];
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: undefined;
        responses: Omit<{
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedEvent"];
                };
            };
        }, 200> & {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: number;
                        sku: string;
                        name: string;
                        start?: string;
                        end?: string;
                        season: components["schemas"]["IdInfo"];
                        program: components["schemas"]["IdInfo"];
                        location: components["schemas"]["Location"];
                        locations?: components["schemas"]["Locations"][];
                        divisions?: components["schemas"]["Division"][];
                        level?: components["schemas"]["EventLevel"];
                        ongoing?: boolean;
                        awards_finalized?: boolean;
                        event_type?: components["schemas"]["EventType"];
                    }[];
                };
            };
        };
    }, {}, "application/json", Event[]>>;
    /**
     * Get matches the team has played
     * @param query Query Params
     * @returns List of matches
     */
    matches(query?: operations["team_getMatches"]["parameters"]["query"], options?: Omit<RequestInit, "body" | "headers">): Promise<import("../utils/client.js").TransformedFetchResponse<{
        parameters: {
            query?: {
                "event[]"?: number[];
                "season[]"?: number[];
                "round[]"?: number[];
                "instance[]"?: number[];
                "matchnum[]"?: number[];
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: undefined;
        responses: Omit<{
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedMatch"];
                };
            };
        }, 200> & {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: number;
                        event: components["schemas"]["IdInfo"];
                        division: components["schemas"]["IdInfo"];
                        round: number;
                        instance: number;
                        matchnum: number;
                        scheduled?: string;
                        started?: string;
                        field?: string;
                        scored: boolean;
                        name: string;
                        alliances: components["schemas"]["Alliance"][];
                    }[];
                };
            };
        };
    }, {}, "application/json", Match[]>>;
    /**
     * Get rankings for the team
     * @param query Query Params
     * @returns List of rankings
     */
    rankings(query?: operations["team_getRankings"]["parameters"]["query"], options?: Omit<RequestInit, "body" | "headers">): Promise<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: {
                "event[]"?: number[];
                "rank[]"?: number[];
                "season[]"?: number[];
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: undefined;
        responses: Omit<{
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedRanking"];
                };
            };
        }, 200> & {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id?: number;
                        event?: components["schemas"]["IdInfo"];
                        division?: components["schemas"]["IdInfo"];
                        rank?: number;
                        team?: components["schemas"]["IdInfo"];
                        wins?: number;
                        losses?: number;
                        ties?: number;
                        wp?: number;
                        ap?: number;
                        sp?: number;
                        high_score?: number;
                        average_points?: number;
                        total_points?: number;
                    }[];
                };
            };
        };
    }, {}, "application/json">>;
    /**
     * Get skills runs for the team
     * @param query Query Params
     * @returns List of skills runs
     */
    skills(query?: operations["team_getSkills"]["parameters"]["query"], options?: Omit<RequestInit, "body" | "headers">): Promise<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: {
                "event[]"?: number[];
                "type[]"?: ("driver" | "programming")[];
                "season[]"?: number[];
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: undefined;
        responses: Omit<{
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSkill"];
                };
            };
        }, 200> & {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id?: number;
                        event?: components["schemas"]["IdInfo"];
                        team?: components["schemas"]["IdInfo"];
                        type?: components["schemas"]["SkillType"];
                        season?: components["schemas"]["IdInfo"];
                        division?: components["schemas"]["IdInfo"];
                        rank?: number;
                        score?: number;
                        attempts?: number;
                    }[];
                };
            };
        };
    }, {}, "application/json">>;
    /**
     * Get awards the team has won
     * @param query Query Params
     * @returns List of awards
     */
    awards(query?: operations["team_getAwards"]["parameters"]["query"], options?: Omit<RequestInit, "body" | "headers">): Promise<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: {
                "event[]"?: number[];
                "season[]"?: number[];
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: undefined;
        responses: Omit<{
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedAward"];
                };
            };
        }, 200> & {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id?: number;
                        event?: components["schemas"]["IdInfo"];
                        order?: number;
                        title?: string;
                        qualifications?: string[];
                        designation?: "tournament" | "division" | null;
                        classification?: "champion" | "finalist" | "semifinalist" | "quarterfinalist" | null;
                        teamWinners?: components["schemas"]["TeamAwardWinner"][];
                        individualWinners?: string[];
                    }[];
                };
            };
        };
    }, {}, "application/json">>;
}
