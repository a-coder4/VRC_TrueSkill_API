import { operations } from "../generated/shim.js";
import { Client } from "../utils/client.js";
import { Event } from "../wrappers/Event.js";
export declare function eventsEndpoint(client: Client): {
    /**
     * Get a list of events
     * @param query Event Search Options
     * @param options Request Options, passed to fetch
     * @returns Paginated List of Events
     */
    search(query?: operations["event_getEvents"]["parameters"]["query"], options?: Omit<RequestInit, "body" | "headers">): Promise<import("../utils/client.js").TransformedFetchResponse<{
        parameters: {
            query?: {
                "id[]"?: number[];
                "sku[]"?: string[];
                "team[]"?: number[];
                "season[]"?: number[];
                start?: string;
                end?: string;
                region?: string;
                "level[]"?: ("World" | "National" | "State" | "Signature" | "Other")[];
                myEvents?: boolean;
                "eventTypes[]"?: import("../generated/robotevents.js").components["schemas"]["EventType"][];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: undefined;
        responses: Omit<{
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../generated/robotevents.js").components["schemas"]["PaginatedEvent"];
                };
            };
        }, 200> & {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: number;
                        sku: string;
                        name: string;
                        start?: string;
                        end?: string;
                        season: import("../generated/robotevents.js").components["schemas"]["IdInfo"];
                        program: import("../generated/robotevents.js").components["schemas"]["IdInfo"];
                        location: import("../generated/robotevents.js").components["schemas"]["Location"];
                        locations?: import("../generated/robotevents.js").components["schemas"]["Locations"][];
                        divisions?: import("../generated/robotevents.js").components["schemas"]["Division"][];
                        level?: import("../generated/robotevents.js").components["schemas"]["EventLevel"];
                        ongoing?: boolean;
                        awards_finalized?: boolean;
                        event_type?: import("../generated/robotevents.js").components["schemas"]["EventType"];
                    }[];
                };
            };
        };
    }, {}, "application/json", Event[]>>;
    /**
     * Get an event by ID
     * @param id Event ID (not SKU)
     * @returns Event
     */
    get(id: number, options?: Omit<RequestInit, "body" | "headers">): Promise<import("../utils/client.js").TransformedFetchResponse<{
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../generated/robotevents.js").components["schemas"]["Event"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../generated/robotevents.js").components["schemas"]["Error"];
                };
            };
        };
    }, {
        signal?: AbortSignal | null;
        window?: null;
        priority?: RequestPriority;
        referrer?: string;
        method?: string;
        cache?: RequestCache;
        credentials?: RequestCredentials;
        integrity?: string;
        keepalive?: boolean;
        mode?: RequestMode;
        redirect?: RequestRedirect;
        referrerPolicy?: ReferrerPolicy;
        params: {
            path: {
                id: number;
            };
        };
    }, "application/json", Event>>;
    /**
     * Get an event by SKU
     * @param id Event SKU
     * @returns Event
     */
    getBySKU(sku: string, options?: Omit<RequestInit, "body" | "headers">): Promise<import("../utils/client.js").TransformedFetchResponse<{
        parameters: {
            query?: {
                "id[]"?: number[];
                "sku[]"?: string[];
                "team[]"?: number[];
                "season[]"?: number[];
                start?: string;
                end?: string;
                region?: string;
                "level[]"?: ("World" | "National" | "State" | "Signature" | "Other")[];
                myEvents?: boolean;
                "eventTypes[]"?: import("../generated/robotevents.js").components["schemas"]["EventType"][];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../generated/robotevents.js").components["schemas"]["PaginatedEvent"];
                };
            };
        };
    }, {
        signal?: AbortSignal | null;
        window?: null;
        priority?: RequestPriority;
        referrer?: string;
        method?: string;
        cache?: RequestCache;
        credentials?: RequestCredentials;
        integrity?: string;
        keepalive?: boolean;
        mode?: RequestMode;
        redirect?: RequestRedirect;
        referrerPolicy?: ReferrerPolicy;
        params: {
            query: {
                "sku[]": string[];
            };
        };
    }, "application/json", Event | null>>;
};
