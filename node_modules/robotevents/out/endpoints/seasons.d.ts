import { operations } from "../generated/shim.js";
import { Client } from "../utils/client.js";
import { Event } from "../wrappers/Event.js";
export declare function seasonsEndpoint(client: Client): {
    /**
     * Get details about a season
     * @param id Season ID
     * @returns Details about the season
     */
    get(id: number, options?: Omit<RequestInit, "body" | "headers">): Promise<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../generated/robotevents.js").components["schemas"]["Season"];
                };
            };
        };
    }, {
        signal?: AbortSignal | null;
        window?: null;
        priority?: RequestPriority;
        referrer?: string;
        method?: string;
        cache?: RequestCache;
        credentials?: RequestCredentials;
        integrity?: string;
        keepalive?: boolean;
        mode?: RequestMode;
        redirect?: RequestRedirect;
        referrerPolicy?: ReferrerPolicy;
        params: {
            path: {
                id: number;
            };
        };
    }, "application/json">>;
    /**
     * Get a list of seasons
     * @param options Query Params
     * @returns List of seasons
     */
    all(query?: operations["season_getSeasons"]["parameters"]["query"], options?: Omit<RequestInit, "body" | "headers">): Promise<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: {
                "id[]"?: number[];
                "program[]"?: number[];
                "team[]"?: number[];
                start?: string;
                end?: string;
                active?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: undefined;
        responses: Omit<{
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../generated/robotevents.js").components["schemas"]["PaginatedSeason"];
                };
            };
        }, 200> & {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id?: number;
                        name?: string;
                        program?: import("../generated/robotevents.js").components["schemas"]["IdInfo"];
                        start?: string;
                        end?: string;
                        years_start?: number;
                        years_end?: number;
                    }[];
                };
            };
        };
    }, {}, "application/json">>;
    /**
     * Get events for a season
     * @param id Season ID
     * @returns List of events
     **/
    events(id: number, query?: operations["season_getEvents"]["parameters"]["query"], options?: Omit<RequestInit, "body" | "headers">): Promise<import("../utils/client.js").TransformedFetchResponse<{
        parameters: {
            query?: {
                "sku[]"?: string[];
                "team[]"?: number[];
                start?: string;
                end?: string;
                "level[]"?: ("World" | "National" | "State" | "Signature" | "Other")[];
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: undefined;
        responses: Omit<{
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../generated/robotevents.js").components["schemas"]["PaginatedEvent"];
                };
            };
        }, 200> & {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: number;
                        sku: string;
                        name: string;
                        start?: string;
                        end?: string;
                        season: import("../generated/robotevents.js").components["schemas"]["IdInfo"];
                        program: import("../generated/robotevents.js").components["schemas"]["IdInfo"];
                        location: import("../generated/robotevents.js").components["schemas"]["Location"];
                        locations?: import("../generated/robotevents.js").components["schemas"]["Locations"][];
                        divisions?: import("../generated/robotevents.js").components["schemas"]["Division"][];
                        level?: import("../generated/robotevents.js").components["schemas"]["EventLevel"];
                        ongoing?: boolean;
                        awards_finalized?: boolean;
                        event_type?: import("../generated/robotevents.js").components["schemas"]["EventType"];
                    }[];
                };
            };
        };
    }, {}, "application/json", Event[]>>;
    1: {
        readonly "2025-2026": 197;
        readonly "2024-2025": 190;
        readonly "2023-2024": 181;
        readonly "2022-2023": 173;
        readonly "2021-2022": 154;
        readonly "2020-2021": 139;
        readonly "2019-2020": 130;
        readonly "2018-2019": 125;
        readonly "2017-2018": 119;
        readonly "2016-2017": 115;
        readonly "2015-2016": 110;
        readonly "2014-2015": 102;
        readonly "2013-2014": 92;
        readonly "2012-2013": 85;
        readonly "2011-2012": 73;
        readonly "2010-2011": 7;
        readonly "2009-2010": 1;
    };
    4: {
        readonly "2025-2026": 198;
        readonly "2024-2025": 191;
        readonly "2023-2024": 182;
        readonly "2022-2023": 175;
        readonly "2021-2022": 156;
        readonly "2020-2021": 140;
        readonly "2019-2020": 131;
        readonly "2018-2019": 126;
        readonly "2017-2018": 120;
        readonly "2016-2017": 116;
        readonly "2015-2016": 111;
        readonly "2014-2015": 103;
        readonly "2013-2014": 93;
        readonly "2012-2013": 88;
        readonly "2011-2012": 76;
        readonly "2010-2011": 10;
        readonly "2009-2010": 4;
    };
    37: {
        readonly "2025-2026": 118;
        readonly "2015-2016": 113;
        readonly "2014-2015": 107;
        readonly "2013-2014": 98;
    };
    41: {
        readonly "2025-2026": 196;
        readonly "2024-2025": 189;
        readonly "2023-2024": 180;
        readonly "2022-2023": 174;
        readonly "2021-2022": 155;
        readonly "2020-2021": 138;
        readonly "2019-2020": 129;
        readonly "2018-2019": 124;
        readonly "2017-2018": 121;
        readonly "2016-2017": 114;
        readonly "2015-2016": 109;
        readonly "2014-2015": 101;
        readonly "2013-2014": 96;
    };
    43: {
        readonly "2019-2020": 137;
    };
    44: {
        readonly "2024-2025": 192;
        readonly "2023-2024": 184;
        readonly "2022-2023": 176;
        readonly "2021-2022": 158;
        readonly "2020-2021": 144;
        readonly "2019-2020": 134;
    };
    46: {
        readonly "2023-2024": 187;
        readonly "2022-2023": 179;
        readonly "2021-2022": 167;
        readonly "2020-2021": 142;
        readonly "2019-2020": 136;
    };
    47: {
        readonly "2023-2024": 186;
        readonly "2022-2023": 178;
        readonly "2021-2022": 166;
        readonly "2020-2021": 141;
        readonly "2019-2020": 135;
    };
    56: {
        readonly "2024-2025": 195;
        readonly "2023-2024": 188;
        readonly "2022-2023": 177;
        readonly "2021-2022": 165;
    };
    57: {
        readonly "2025-2026": 199;
        readonly "2024-2025": 194;
        readonly "2023-2024": 185;
        readonly "2021-2022": 171;
    };
};
