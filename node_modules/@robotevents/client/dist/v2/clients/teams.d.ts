import type { ObjectBuilder } from '../../builders.js';
import { Client } from '../client.js';
import { PageableRequestBuilder, type PageableParams } from '../pageable.js';
import type { Grade, Team } from './index.js';
export declare class TeamsClient extends Client {
    findAll(request?: (builder: TeamsRequestBuilder) => ObjectBuilder<TeamsRequest>): import("../client.js").RobotEventsCursor<Team>;
    findAllByEvent(request: (builder: EventTeamsRequestBuilder) => ObjectBuilder<EventTeamsRequest>): import("../client.js").RobotEventsCursor<Team>;
    findById(id: number): Promise<Team>;
}
export declare class TeamsRequestBuilder extends PageableRequestBuilder<TeamsRequest, TeamsRequestBuilder> {
    #private;
    ids(...value: number[]): this;
    numbers(...value: string[]): this;
    eventIds(...value: number[]): this;
    registered(value: boolean): this;
    programIds(...value: number[]): this;
    grades(...value: Grade[]): this;
    countries(...value: string[]): this;
    mine(value: boolean): this;
    build(): TeamsRequest;
    static TeamsRequest: {
        new (builder: TeamsRequestBuilder): {
            readonly ids: number[] | undefined;
            readonly numbers: string[] | undefined;
            readonly eventIds: number[] | undefined;
            readonly registered: boolean | undefined;
            readonly programIds: number[] | undefined;
            readonly grades: Grade[] | undefined;
            readonly countries: string[] | undefined;
            readonly mine: boolean | undefined;
            params(): TeamsParams;
            readonly page?: number | undefined;
            readonly perPage?: number | undefined;
        };
    };
}
export declare class TeamsRequest extends TeamsRequestBuilder.TeamsRequest {
}
interface TeamsParams extends PageableParams {
    id?: number[];
    number?: string[];
    event?: number[];
    registered?: boolean;
    program?: number[];
    grade?: Grade[];
    country?: string[];
    myTeams?: boolean;
}
export declare class EventTeamsRequestBuilder extends PageableRequestBuilder<EventTeamsRequest, EventTeamsRequestBuilder> {
    #private;
    eventId(value: number): this;
    numbers(...value: string[]): this;
    registered(value: boolean): this;
    grades(...value: Grade[]): this;
    countries(...value: string[]): this;
    mine(value: boolean): this;
    build(): EventTeamsRequest;
    static EventTeamsRequest: {
        new (builder: EventTeamsRequestBuilder): {
            readonly eventId: number;
            readonly numbers?: string[] | undefined;
            readonly registered?: boolean | undefined;
            readonly grades?: Grade[] | undefined;
            readonly countries?: string[] | undefined;
            readonly mine?: boolean | undefined;
            params(): EventTeamsParams;
            readonly page?: number | undefined;
            readonly perPage?: number | undefined;
        };
    };
}
export declare class EventTeamsRequest extends EventTeamsRequestBuilder.EventTeamsRequest {
}
interface EventTeamsParams extends PageableParams {
    number?: string[];
    registered?: boolean;
    grade?: Grade[];
    country?: string[];
    myTeams?: boolean;
}
export {};
//# sourceMappingURL=teams.d.ts.map