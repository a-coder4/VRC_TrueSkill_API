export declare abstract class Cursor<T> {
    abstract hasNext(): Promise<boolean>;
    abstract next(): Promise<T>;
    forEach(iterator: (value: T) => void): Promise<void>;
    filter(predicate: (value: T) => boolean): Cursor<T>;
    map<U>(transform: (value: T) => U): Cursor<U>;
    flatMap<U>(transform: (value: T) => Cursor<U>): Cursor<U>;
    toArray(): Promise<T[]>;
}
export declare class FilteredCursor<T> extends Cursor<T> {
    private readonly cursor;
    private readonly filterFn;
    private nextValue?;
    constructor(cursor: Cursor<T>, filterFn: (value: T) => boolean);
    hasNext(): Promise<boolean>;
    next(): Promise<T>;
}
export declare class TransformedCursor<T, V> extends Cursor<T> {
    private readonly cursor;
    private readonly transform;
    constructor(cursor: Cursor<V>, transform: (value: V) => T);
    hasNext(): Promise<boolean>;
    next(): Promise<T>;
    map<U>(transform: (value: T) => U): Cursor<U>;
}
export declare class NestedCursor<T> extends Cursor<T> {
    private readonly cursor;
    private innerCursor?;
    constructor(cursor: Cursor<Cursor<T>>);
    hasNext(): Promise<boolean>;
    next(): Promise<T>;
}
export declare class ArrayCursor<T> extends Cursor<T> {
    private readonly values;
    constructor(values: T[]);
    hasNext(): Promise<boolean>;
    next(): Promise<T>;
    toArray(): Promise<T[]>;
}
//# sourceMappingURL=cursor.d.ts.map