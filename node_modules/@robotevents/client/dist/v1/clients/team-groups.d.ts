import type { TeamGroup } from './index.js';
import { Client } from '../client.js';
import type { ObjectBuilder } from '../../builders.js';
export declare class TeamGroupsClient extends Client {
    findAll(request?: (builder: TeamGroupsRequestBuilder) => ObjectBuilder<TeamGroupsRequest>): Promise<TeamGroup[]>;
}
export declare class TeamGroupsRequestBuilder implements ObjectBuilder<TeamGroupsRequest> {
    #private;
    programIds(...value: number[]): this;
    seasonId(value: number): this;
    location(country: string, region?: string): this;
    build(): TeamGroupsRequest;
    static TeamGroupsRequest: {
        new (builder: TeamGroupsRequestBuilder): {
            readonly programIds?: number[] | undefined;
            readonly seasonId?: number | undefined;
            readonly country?: string | undefined;
            readonly region?: string | undefined;
            data(): TeamGroupsData;
        };
    };
}
export declare class TeamGroupsRequest extends TeamGroupsRequestBuilder.TeamGroupsRequest {
}
interface TeamGroupsData {
    programs?: number[];
    season_id?: number;
    country?: string;
    region?: string;
    when?: When;
}
declare enum When {
    FUTURE = "future",
    PAST = "past"
}
export {};
//# sourceMappingURL=team-groups.d.ts.map